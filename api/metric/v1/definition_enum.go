// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package v1

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	ScopeClub Scope = iota
	ScopeTeam
	ScopeCoach
	ScopePlayer
)

var ErrInvalidScope = errors.New("not a valid Scope")

const _ScopeName = "ClubTeamCoachPlayer"

var _ScopeMap = map[Scope]string{
	ScopeClub:   _ScopeName[0:4],
	ScopeTeam:   _ScopeName[4:8],
	ScopeCoach:  _ScopeName[8:13],
	ScopePlayer: _ScopeName[13:19],
}

// String implements the Stringer interface.
func (x Scope) String() string {
	if str, ok := _ScopeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Scope(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Scope) IsValid() bool {
	_, ok := _ScopeMap[x]
	return ok
}

var _ScopeValue = map[string]Scope{
	_ScopeName[0:4]:   ScopeClub,
	_ScopeName[4:8]:   ScopeTeam,
	_ScopeName[8:13]:  ScopeCoach,
	_ScopeName[13:19]: ScopePlayer,
}

// ParseScope attempts to convert a string to a Scope.
func ParseScope(name string) (Scope, error) {
	if x, ok := _ScopeValue[name]; ok {
		return x, nil
	}
	return Scope(0), fmt.Errorf("%s is %w", name, ErrInvalidScope)
}

// MarshalText implements the text marshaller method.
func (x Scope) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Scope) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseScope(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Scope) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

var errScopeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Scope) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Scope(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Scope(v)
	case string:
		*x, err = ParseScope(v)
	case []byte:
		*x, err = ParseScope(string(v))
	case Scope:
		*x = v
	case int:
		*x = Scope(v)
	case *Scope:
		if v == nil {
			return errScopeNilPtr
		}
		*x = *v
	case uint:
		*x = Scope(v)
	case uint64:
		*x = Scope(v)
	case *int:
		if v == nil {
			return errScopeNilPtr
		}
		*x = Scope(*v)
	case *int64:
		if v == nil {
			return errScopeNilPtr
		}
		*x = Scope(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Scope(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errScopeNilPtr
		}
		*x = Scope(*v)
	case *uint:
		if v == nil {
			return errScopeNilPtr
		}
		*x = Scope(*v)
	case *uint64:
		if v == nil {
			return errScopeNilPtr
		}
		*x = Scope(*v)
	case *string:
		if v == nil {
			return errScopeNilPtr
		}
		*x, err = ParseScope(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Scope) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	TypeCounter Type = iota
	TypeGauge
)

var ErrInvalidType = errors.New("not a valid Type")

const _TypeName = "CounterGauge"

var _TypeMap = map[Type]string{
	TypeCounter: _TypeName[0:7],
	TypeGauge:   _TypeName[7:12],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:7]:  TypeCounter,
	_TypeName[7:12]: TypeGauge,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Type) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

var errTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Type) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Type(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Type(v)
	case string:
		*x, err = ParseType(v)
	case []byte:
		*x, err = ParseType(string(v))
	case Type:
		*x = v
	case int:
		*x = Type(v)
	case *Type:
		if v == nil {
			return errTypeNilPtr
		}
		*x = *v
	case uint:
		*x = Type(v)
	case uint64:
		*x = Type(v)
	case *int:
		if v == nil {
			return errTypeNilPtr
		}
		*x = Type(*v)
	case *int64:
		if v == nil {
			return errTypeNilPtr
		}
		*x = Type(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Type(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errTypeNilPtr
		}
		*x = Type(*v)
	case *uint:
		if v == nil {
			return errTypeNilPtr
		}
		*x = Type(*v)
	case *uint64:
		if v == nil {
			return errTypeNilPtr
		}
		*x = Type(*v)
	case *string:
		if v == nil {
			return errTypeNilPtr
		}
		*x, err = ParseType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Type) Value() (driver.Value, error) {
	return x.String(), nil
}
