// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package v1

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	StrongFootRight StrongFoot = "Right"
	StrongFootLeft  StrongFoot = "Left"
	StrongFootBoth  StrongFoot = "Both"
)

var ErrInvalidStrongFoot = errors.New("not a valid StrongFoot")

// String implements the Stringer interface.
func (x StrongFoot) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StrongFoot) IsValid() bool {
	_, err := ParseStrongFoot(string(x))
	return err == nil
}

var _StrongFootValue = map[string]StrongFoot{
	"Right": StrongFootRight,
	"Left":  StrongFootLeft,
	"Both":  StrongFootBoth,
}

// ParseStrongFoot attempts to convert a string to a StrongFoot.
func ParseStrongFoot(name string) (StrongFoot, error) {
	if x, ok := _StrongFootValue[name]; ok {
		return x, nil
	}
	return StrongFoot(""), fmt.Errorf("%s is %w", name, ErrInvalidStrongFoot)
}

// MarshalText implements the text marshaller method.
func (x StrongFoot) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StrongFoot) UnmarshalText(text []byte) error {
	tmp, err := ParseStrongFoot(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *StrongFoot) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

var errStrongFootNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *StrongFoot) Scan(value interface{}) (err error) {
	if value == nil {
		*x = StrongFoot("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseStrongFoot(v)
	case []byte:
		*x, err = ParseStrongFoot(string(v))
	case StrongFoot:
		*x = v
	case *StrongFoot:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x, err = ParseStrongFoot(*v)
	default:
		return errors.New("invalid type for StrongFoot")
	}

	return
}

// Value implements the driver Valuer interface.
func (x StrongFoot) Value() (driver.Value, error) {
	return x.String(), nil
}
