// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package v1

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	StrongFootRight StrongFoot = iota
	StrongFootLeft
)

var ErrInvalidStrongFoot = errors.New("not a valid StrongFoot")

const _StrongFootName = "RightLeft"

var _StrongFootMap = map[StrongFoot]string{
	StrongFootRight: _StrongFootName[0:5],
	StrongFootLeft:  _StrongFootName[5:9],
}

// String implements the Stringer interface.
func (x StrongFoot) String() string {
	if str, ok := _StrongFootMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StrongFoot(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StrongFoot) IsValid() bool {
	_, ok := _StrongFootMap[x]
	return ok
}

var _StrongFootValue = map[string]StrongFoot{
	_StrongFootName[0:5]: StrongFootRight,
	_StrongFootName[5:9]: StrongFootLeft,
}

// ParseStrongFoot attempts to convert a string to a StrongFoot.
func ParseStrongFoot(name string) (StrongFoot, error) {
	if x, ok := _StrongFootValue[name]; ok {
		return x, nil
	}
	return StrongFoot(0), fmt.Errorf("%s is %w", name, ErrInvalidStrongFoot)
}

// MarshalText implements the text marshaller method.
func (x StrongFoot) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StrongFoot) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStrongFoot(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *StrongFoot) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

var errStrongFootNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *StrongFoot) Scan(value interface{}) (err error) {
	if value == nil {
		*x = StrongFoot(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = StrongFoot(v)
	case string:
		*x, err = ParseStrongFoot(v)
	case []byte:
		*x, err = ParseStrongFoot(string(v))
	case StrongFoot:
		*x = v
	case int:
		*x = StrongFoot(v)
	case *StrongFoot:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = *v
	case uint:
		*x = StrongFoot(v)
	case uint64:
		*x = StrongFoot(v)
	case *int:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = StrongFoot(*v)
	case *int64:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = StrongFoot(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = StrongFoot(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = StrongFoot(*v)
	case *uint:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = StrongFoot(*v)
	case *uint64:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x = StrongFoot(*v)
	case *string:
		if v == nil {
			return errStrongFootNilPtr
		}
		*x, err = ParseStrongFoot(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x StrongFoot) Value() (driver.Value, error) {
	return x.String(), nil
}
