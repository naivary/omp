// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package openapi

import (
	"errors"
	"fmt"
)

const (
	ParamInPath ParamIn = iota
	ParamInQuery
	ParamInHeader
	ParamInCookie
)

var ErrInvalidParamIn = errors.New("not a valid ParamIn")

const _ParamInName = "PathQueryHeaderCookie"

var _ParamInMap = map[ParamIn]string{
	ParamInPath:   _ParamInName[0:4],
	ParamInQuery:  _ParamInName[4:9],
	ParamInHeader: _ParamInName[9:15],
	ParamInCookie: _ParamInName[15:21],
}

// String implements the Stringer interface.
func (x ParamIn) String() string {
	if str, ok := _ParamInMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ParamIn(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ParamIn) IsValid() bool {
	_, ok := _ParamInMap[x]
	return ok
}

var _ParamInValue = map[string]ParamIn{
	_ParamInName[0:4]:   ParamInPath,
	_ParamInName[4:9]:   ParamInQuery,
	_ParamInName[9:15]:  ParamInHeader,
	_ParamInName[15:21]: ParamInCookie,
}

// ParseParamIn attempts to convert a string to a ParamIn.
func ParseParamIn(name string) (ParamIn, error) {
	if x, ok := _ParamInValue[name]; ok {
		return x, nil
	}
	return ParamIn(0), fmt.Errorf("%s is %w", name, ErrInvalidParamIn)
}

// MarshalText implements the text marshaller method.
func (x ParamIn) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ParamIn) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseParamIn(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *ParamIn) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
